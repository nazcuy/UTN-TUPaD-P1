"""
1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario
"""
"""
def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num_usuario = int(input("Ingrese un n√∫mero: "))
print(f"Los factoriales desde el 1 hasta el {num_usuario} son:\n")
for i in range(1, num_usuario + 1):
    print(f"Factorial de {i}: {factorial(i)}")
"""
"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique."""
"""
def fibonacci(f):
    if f == 0 or f == 1:
        return f
    else:
        return fibonacci(f-1)+fibonacci(f-2)

pos = int(input("Ingrese una posici√≥n: "))
for i in range(pos+1):
    print(f"Posici√≥n {i}: {fibonacci(i)}")
"""
"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ^ùëö = ùëõ ‚àó ùëö^(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.
"""
"""
def potencia(n, m):
    if m == 0:
        return 1
    else:
        return n * potencia(m, m-1)

print("Calcule la potencia de un n√∫mero base elevado a su exponente utilizando la f√≥rmula n^m = n * (m^(m-1))")
base = int(input("N√∫mero base: "))
exp = int(input("Elevado a: "))
resultado = potencia(base, exp)
print(f"El resultado es {resultado}.")
"""
"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto. """
"""
def binario(nro):
    if nro == 0:
        return '0'
    elif nro == 1:
        return '1'
    else:
        return binario(nro//2) + str(nro%2)
    
base10 = int(input("Ingrese un n√∫mero: "))
print(f"El n√∫mero en binario es: {binario(base10)} ")
"""
"""5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()."""
"""
def es_palindromo(palabra):
    if len(palabra) == 0:
        return True
    elif len(palabra) == 1:
        return True
    elif palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo(palabra[1:-1])

frase = input("Ingrese una frase para saber si es pal√≠ndromo: ")
if es_palindromo(frase) == True:
    print("Es un pal√≠ndromo!")
else:
    print("No lo es...")    
"""
"""6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)"""
"""
def suma_digitos(n):
    if n == 0:
        return 0
    else:
        return (n % 10) + (suma_digitos(n // 10))

numero = int(input("Ingrese un n√∫mero: "))
print(f"La suma de todos los d√≠gitos es: {suma_digitos(numero)}")
"""
"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.
Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)"""

def contar_bloques(n):